{"version":3,"sources":["components/InputForm.js","components/Header.js","components/BookTableRow.js","components/BookTable.js","App.js","serviceWorker.js","index.js"],"names":["InputForm","props","handleChange","e","target","name","value","setState","handleSubmit","newBook","id","uuidv4","title","state","bookTitle","author","bookAuthor","pages","bookPages","status","bookStatus","alert","onClick","action","onChange","this","type","placeholder","min","disabled","Component","Header","className","href","rel","BookTableRow","handleDelete","book","BookTable","bookId","bookComponents","booksData","map","key","border","App","books","localStorage","setItem","JSON","stringify","updatedBooks","filter","getItem","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTA4EeA,E,kDAxEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAUVC,aAAe,SAACC,GAAO,IAAD,EACMA,EAAEC,OAAlBC,EADU,EACVA,KAAMC,EADI,EACJA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KAbT,EAgBnBE,aAAe,SAACL,GAEZ,IAAMM,EAAU,CACZC,GAAIC,cACJC,MAAO,EAAKC,MAAMC,UAClBC,OAAQ,EAAKF,MAAMG,WACnBC,MAAO,EAAKJ,MAAMK,UAClBC,OAAQ,EAAKN,MAAMO,YAGD,KAAlBX,EAAQG,OAAmC,KAAnBH,EAAQM,QAAmC,KAAlBN,EAAQQ,MACzDI,MAAM,qCAGN,EAAKpB,MAAMqB,QAAQb,GACnB,EAAKF,SAAS,CACVO,UAAW,GACXE,WAAY,GACZE,UAAW,GACXE,WAAY,OAhCpB,EAAKP,MAAQ,CACTC,UAAW,GACXE,WAAY,GACZE,UAAW,GACXE,WAAY,IAPD,E,qDAyCf,OACI,6BACI,0BAAMf,KAAK,OAAOkB,OAAO,IACrB,wBAAIb,GAAG,cAAP,YACA,2BACIc,SAAUC,KAAKvB,aACfI,MAAOmB,KAAKZ,MAAMC,UAAWY,KAAK,OAAOrB,KAAK,YAAYK,GAAG,QAAQiB,YAAY,UACrF,2BACIH,SAAUC,KAAKvB,aACfI,MAAOmB,KAAKZ,MAAMG,WAAYU,KAAK,OAAOrB,KAAK,aAAaK,GAAG,SAASiB,YAAY,WACxF,2BACIH,SAAUC,KAAKvB,aACfI,MAAOmB,KAAKZ,MAAMK,UAAWQ,KAAK,SAASrB,KAAK,YAAYK,GAAG,QAAQkB,IAAI,IAAID,YAAY,oBAC/F,4BACIH,SAAUC,KAAKvB,aACfI,MAAOmB,KAAKZ,MAAMO,WAAYf,KAAK,aAAaK,GAAG,QACnD,4BAAQmB,UAAQ,GAAhB,gBACA,4BAAQvB,MAAM,QAAd,QACA,4BAAQA,MAAM,YAAd,YAEJ,4BACIgB,QAASG,KAAKjB,aACdkB,KAAK,UAFT,a,GA9DII,a,OCWTC,MAXf,WACI,OACI,6BACI,4BAAQC,UAAU,UACd,8CACA,qEAA0C,kBAAC,IAAD,MAA1C,IAAsD,uBAAGC,KAAK,+BAA+B7B,OAAO,QAAQ8B,IAAI,YAA1D,iBCqBvDC,E,kDAzBX,WAAYlC,GAAQ,IAAD,8BACf,cAAMA,IAOVmC,aAAe,WACX,EAAKnC,MAAMqB,QAAQ,EAAKrB,MAAMoC,KAAK3B,KANnC,EAAKG,MAAQ,GAHE,E,qDAaf,OACI,4BACI,4BAAKY,KAAKxB,MAAMoC,KAAKzB,OACrB,4BAAKa,KAAKxB,MAAMoC,KAAKtB,QACrB,4BAAKU,KAAKxB,MAAMoC,KAAKpB,OACrB,4BAAKQ,KAAKxB,MAAMoC,KAAKlB,QACrB,4BAAI,4BAAQG,QAASG,KAAKW,cAAc,kBAAC,IAAD,a,GApB7BN,aCmCZQ,E,kDAlCX,WAAYrC,GAAQ,IAAD,8BACf,cAAMA,IAMVmC,aAAe,SAACG,GACZ,EAAKtC,MAAMqB,QAAQiB,IALnB,EAAK1B,MAAQ,GAHE,E,qDAWT,IAAD,OACC2B,EAAiBf,KAAKxB,MAAMwC,UAAUC,KAAI,SAAAL,GAAI,OAAI,kBAAC,EAAD,CAAcM,IAAKN,EAAK3B,GAAI2B,KAAMA,EAAMf,QAAS,EAAKc,kBAC9G,OACI,6BACI,2BAAOQ,OAAQ,IAAKZ,UAAU,YAC1B,+BACI,4BACI,qCACA,sCACA,qCACA,sCACA,wCAGR,+BACKQ,S,GA3BDV,aC0CTe,E,kDArCb,WAAY5C,GAAQ,IAAD,8BACjB,cAAMA,IAcRO,aAAe,SAACC,GACd,EAAKF,SAAS,CAAEuC,MAAM,GAAD,mBAAM,EAAKjC,MAAMiC,OAAjB,CAAwBrC,MAC3C,kBAAMsC,aAAaC,QAAQ,aAAcC,KAAKC,UAAU,EAAKrC,MAAMiC,YAjBpD,EAoBnBV,aAAe,SAACG,GACd,IACMY,EADQ,EAAKtC,MAAMiC,MACEM,QAAO,SAAAf,GAAI,OAAIA,EAAK3B,KAAO6B,KACtD,EAAKhC,SAAS,CAAEuC,MAAOK,IAAgB,kBAAMJ,aAAaC,QAAQ,aAAcC,KAAKC,UAAU,EAAKrC,MAAMiC,YApB1G,EAAKjC,MAAQ,CACXiC,MAAO,IAJQ,E,gEASjB,GAA0C,OAAvCC,aAAaM,QAAQ,cAAwB,CAChD,IAAMZ,EAAYQ,KAAKK,MAAMP,aAAaM,QAAQ,eAClD5B,KAAKlB,SAAS,CAAEuC,MAAOL,O,+BAgBvB,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWV,QAASG,KAAKjB,eACzB,kBAAC,EAAD,CAAWiC,UAAWhB,KAAKZ,MAAMiC,MAAOxB,QAASG,KAAKW,oB,GAjC5CN,aCMEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.828c2a61.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\n\nclass InputForm extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            bookTitle: '',\n            bookAuthor: '',\n            bookPages: '',\n            bookStatus: '',\n        }\n    }\n\n    handleChange = (e) => {\n        const { name, value } = e.target\n        this.setState({ [name]: value })\n    }\n\n    handleSubmit = (e) => {\n\n        const newBook = {\n            id: uuidv4(),\n            title: this.state.bookTitle,\n            author: this.state.bookAuthor,\n            pages: this.state.bookPages,\n            status: this.state.bookStatus\n        }\n\n        if (newBook.title === '' || newBook.author === '' || newBook.pages === '') {\n            alert('Please fill in all of the fields')\n\n        } else {\n            this.props.onClick(newBook);\n            this.setState({\n                bookTitle: '',\n                bookAuthor: '',\n                bookPages: '',\n                bookStatus: ''\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <form name=\"form\" action=\"\">\n                    <h1 id=\"inputTitle\">New Book</h1>\n                    <input\n                        onChange={this.handleChange}\n                        value={this.state.bookTitle} type=\"text\" name=\"bookTitle\" id=\"title\" placeholder=\"Title\" />\n                    <input\n                        onChange={this.handleChange}\n                        value={this.state.bookAuthor} type=\"text\" name=\"bookAuthor\" id=\"author\" placeholder=\"Author\" />\n                    <input\n                        onChange={this.handleChange}\n                        value={this.state.bookPages} type=\"number\" name=\"bookPages\" id=\"pages\" min='1' placeholder=\"Number of pages\" />\n                    <select\n                        onChange={this.handleChange}\n                        value={this.state.bookStatus} name=\"bookStatus\" id=\"read\">\n                        <option disabled>Read/To Read</option>\n                        <option value=\"read\">read</option>\n                        <option value=\"not-read\">to-read</option>\n                    </select>\n                    <button\n                        onClick={this.handleSubmit}\n                        type=\"submit\">\n                        Add\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default InputForm\n","import React from 'react'\nimport { FaGithub } from 'react-icons/fa';\n\nfunction Header() {\n    return (\n        <div>\n            <header className='navbar'>\n                <h1>Online Library</h1>\n                <p>Created by Irem for the Odin Project | <FaGithub/> <a href=\"https://github.com/ergunirem\" target=\"blank\" rel='noopener'>ergunirem</a></p>\n            </header>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport { FaTrash } from 'react-icons/fa';\n\nclass BookTableRow extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n\n        }\n    }\n\n    handleDelete = () => {\n        this.props.onClick(this.props.book.id)\n    }\n\n    render() {\n        return (\n            <tr>\n                <td>{this.props.book.title}</td>\n                <td>{this.props.book.author}</td>\n                <td>{this.props.book.pages}</td>\n                <td>{this.props.book.status}</td>\n                <td><button onClick={this.handleDelete}><FaTrash /></button></td>\n            </tr>\n        )\n    }\n}\n\nexport default BookTableRow\n","import React, { Component } from 'react'\nimport BookTableRow from './BookTableRow'\n\nclass BookTable extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n        }\n    }\n\n    handleDelete = (bookId) => {\n        this.props.onClick(bookId)\n    }\n\n    render() {\n        const bookComponents = this.props.booksData.map(book => <BookTableRow key={book.id} book={book} onClick={this.handleDelete} />)\n        return (\n            <div>\n                <table border={\"1\"} className=\"my-table\">\n                    <thead>\n                        <tr>\n                            <th>Title</th>\n                            <th>Author</th>\n                            <th>Pages</th>\n                            <th>Status</th>\n                            <th>Delete</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {bookComponents}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default BookTable\n","import React, { Component } from 'react';\nimport './App.css';\nimport InputForm from './components/InputForm';\nimport Header from './components/Header';\nimport BookTable from './components/BookTable';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      books: [],\n    }\n  }\n\n  componentDidMount() {\n    if(localStorage.getItem('localBooks') !== null) {\n    const booksData = JSON.parse(localStorage.getItem('localBooks'))\n    this.setState({ books: booksData })\n    } \n  }\n\n  handleSubmit = (newBook) => {\n    this.setState({ books: [...this.state.books, newBook] },\n      () => localStorage.setItem('localBooks', JSON.stringify(this.state.books)))\n  }\n\n  handleDelete = (bookId) => {\n    const books = this.state.books\n    const updatedBooks = books.filter(book => book.id !== bookId)\n    this.setState({ books: updatedBooks }, () => localStorage.setItem('localBooks', JSON.stringify(this.state.books)))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <InputForm onClick={this.handleSubmit}/>\n        <BookTable booksData={this.state.books} onClick={this.handleDelete}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}